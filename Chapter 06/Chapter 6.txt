An example of array declaration in C is as follows:int numbers[5]; // Declares an integer array of size 5In this declaration, numbers is the name of the array, and it can store up to five integers.One-dimensional arrays: Example:int grades[4] = {90, 85, 88, 92}; // A one-dimensional array of integersIn this example, grades is a one-dimensional array containing four integer values.Multi-dimensional arrays: Example:int matrix[3][4]; // A two-dimensional array with 3 rows and 4 columnsDynamic arrays: Example:int *dynamicArray; int size = 5;dynamicArray = (int *)malloc(size * sizeof(int)); // Allocates memory for 5 integersJagged arrays: Example:int *jaggedArray[3]; // Array of three integer pointersjaggedArray[0] = (int *)malloc(2 * sizeof(int)); // First row has 2 elements jaggedArray[1] = (int *)malloc(3 * sizeof(int)); // Second row has 3 elementsjaggedArray[2] = (int *)malloc(1 * sizeof(int)); // Third row has 1 elementInitializing an array during declarationExample:int numbers[5] = {10, 20, 30, 40, 50}; // Explicitly initializes all 5 elementsExample:int numbers[] = {10, 20, 30}; // Array of size 3Initialization includes the following actions:Partial initialization: Example:int numbers[5] = {10, 20}; // Initializes first two elements; others will be 0Uninitialized array: If you declare an array without initializing it, it will contain undefined (garbage) values.Example:int numbers[5]; // Elements will have garbage valuesProcessing an arrayExample:int numbers[5] = {10, 20, 30, 40, 50};printf("%d", numbers[2]); // Outputs 30Modifying array elements: You can modify any element in the array by assigning a new value to the corresponding index.Example:int numbers[5] = {10, 20, 30, 40, 50};numbers[3] = 100; // Changes the 4th element from 40 to 100Looping through an array: Example:int numbers[5] = {10, 20, 30, 40, 50};// Loop to print all elements for(int i = 0; i < 5; i++) {printf("%d ", numbers[i]);}Basic operations processing arraysSumming array elements:int numbers[5] = {10, 20, 30, 40, 50}; int sum = 0;for(int i = 0; i < 5; i++) {sum += numbers[i]; // Adds each element to sum}printf("Sum = %d", sum); // Outputs: Sum = 150Finding maximum or minimum element:int numbers[5] = {10, 20, 30, 40, 50};int max = numbers[0]; // Assume first element is largest for(int i = 1; i < 5; i++) {if(numbers[i] > max) {max = numbers[i]; // Update max if larger element is found}}printf("Maximum element = %d", max); // Outputs: Maximum element = 50Multidimensional array initialization and processingExample:int matrix[2][3] = {{1, 2, 3},{4, 5, 6}};for(int i = 0; i < 2; i++) { for(int j = 0; j < 3; j++) {printf("%d ", matrix[i][j]); // Accesses each element in the 2D array}}Declaring and initializing stringsDeclaration: A string is declared as a character array:char str[20]; // Declares a character array of size 20Initialization: Strings can be initialized using string literals or by specifying individual characters.Using a string literal:char str[20] = "Hello, World!"; // Initializes with a string literalUsing individual characters:char str[5] = {'H', 'e', 'l', 'l', 'o', '\0'}; // Explicitly initializing each characterUsing scanf and printf:char name[50];scanf("%s", name); // Reads a single word (without spaces) printf("Hello, %s!", name); // Prints the stringUsing fgets and puts:char sentence[100];fgets(sentence, 100, stdin); // Reads a line of input including spaces puts(sentence); // Outputs the stringCommon string handling functionsstrlen():char str[] = "Hello";int len = strlen(str); // len will be 5strcpy(): Copy one string to another. This function copies the content of one string into another.char src[] = "Source"; char dest[20];strcpy(dest, src); // Copies "Source" into deststrcat(): Concatenate two strings.This function appends one string to the end of another.char str1[20] = "Hello"; char str2[] = " World";strcat(str1, str2); // str1 now contains "Hello World"strcmp(): Compare two strings. This function compares two strings lexicographically. It returns:0 if the strings are equalA positive value if the first string is greaterA negative value if the first string is smallerchar str1[] = "Apple"; char str2[] = "Orange";int result = strcmp(str1, str2); // Will return a negative value as "Apple" is smaller than "Orange"strncpy() and strncat(): char src[] = "Hello"; char dest[10];strncpy(dest, src, 3); // Copies only "Hel" into destExample: Counting vowels in a String:char str[] = "Hello World"; int vowels = 0;for (int i = 0; str[i] != '\0'; i++) {if (str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u' ||str[i] == 'A' || str[i] == 'E' || str[i] == 'I' || str[i] == 'O' || str[i] == 'U') { vowels++;}}printf("Number of vowels: %d", vowels);String manipulation example:#include <stdio.h>#include <string.h>int main() {char firstName[50], lastName[50], fullName[100];// Input first and last nameprintf("Enter first name: ");scanf("%s", firstName);printf("Enter last name: ");scanf("%s", lastName);// Concatenate first and last namestrcpy(fullName, firstName);strcat(fullName, " ");strcat(fullName, lastName);// Display the full nameprintf("Full Name: %s\n", fullName);// Find the length of the full nameprintf("Length of Full Name: %lu\n", strlen(fullName));return 0;}