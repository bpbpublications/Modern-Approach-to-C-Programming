Equal to (==): Compares if two values are equal.Output: Returns True if the values are equal, otherwise False. Example:a = 5b = 5if a == b:print("a is equal to b")  # This will printNot equal to (!=): Compares if two values are not equal.Output: Returns True if the values are not equal, otherwise False. Example:a = 5b = 10if a != b:print("a is not equal to b")  # This will printGreater than (>): Checks if the left operand is greater than the right operand.Output: Returns True if the left value is greater, otherwise False.Example:x = 7y = 5if x > y:print("x is greater than y")  # This will printLess than (<): Checks if the left operand is less than the right operand. Output: Returns True if the left value is less, otherwise, False. Example:x = 3y = 8if x < y:print("x is less than y")  # This will printGreater than or equal to (>=): Checks if the left operand is greater than or equal to the right operand.Output: Returns True if the left value is greater than or equal to the right, otherwise False. Example:a = 10b = 10if a >= b:print("a is greater than or equal to b")  # This will printLess than or equal to (<=): Checks if the left operand is less than or equal to the right operand.Output: Returns True if the left value is less than or equal to the right, otherwise False. Example:score = 85passing_score = 85if score <= passing_score:print("You passed the exam")  # This will printRelational operators in control structuresExample with the if-else statement:age = 20if age >= 18:print("You are eligible to vote.") # This will print else:print("You are not eligible to vote.")Example with the while loop:count = 1while count <= 5:print("Count is:", count) count += 1Logical combination with relational operatorsExample:age = 25income = 40000if age > 18 and income > 30000:print("You qualify for the loan.")  # This will printAND (&& or AND)Example:age = 25income = 45000if age > 18 and income > 30000:print("You are eligible for the loan.") # This will print else:print("You are not eligible.")OR (|| or or)Example:age = 16 parent_permission = Trueif age >= 18 or parent_permission:print("You can go on the trip.") # This will print else:print("You cannot go.")NOT (! or not)Example:is_raining = False if not is_raining:print("You can go outside without an umbrella.") # This will print else:print("You need an umbrella.")Logical operators and control structuresExample with if-else:temperature = 35 raining = Falseif temperature > 30 and not raining:print("It's a hot and dry day.") # This will print else:print("Weather conditions are different.")Example with while loop:count = 0max_count = 5 safe = Truewhile count < max_count and safe: print("Iteration:", count)count += 1# If something happens, we might set safe to FalseBitwise operatorBitwise AND (&): Compares each bit of two operands. If both bits are 1, the resulting bit is 1; otherwise, it is 0.Usage: Commonly used for masking certain bits. Example:#include <stdio.h> int main() {int a = 5; // 0101 in binary int b = 3; // 0011 in binaryint result = a & b; // result is 1 (binary: 0001) printf("Bitwise AND: %d\n", result); // Output: 1 return 0;}Bitwise OR (|): Compares each bit of two operands. If at least one of the bits is 1, the resulting bit is 1; otherwise, it is 0.Usage: Used to set specific bits to 1. Example:#include <stdio.h> int main() {int a = 5; // 0101 in binary int b = 3; // 0011 in binaryint result = a | b; // result is 7 (binary: 0111) printf("Bitwise OR: %d\n", result); // Output: 7 return 0;}Bitwise XOR (^): Compares each bit of two operands. If one of the bits is 1 and the other is 0, the resulting bit is 1; otherwise, it is 0.Usage: Useful for toggling specific bits. Example:#include <stdio.h> int main() {int a = 5; // 0101 in binary int b = 3; // 0011 in binaryint result = a ^ b; // result is 6 (binary: 0110)printf("Bitwise XOR: %d\n", result); // Output: 6 return 0;}Bitwise NOT (~): Inverts all the bits of the operand. Each 1 becomes 0, and each 0 becomes 1. In signed integers, this also performs a two's complement negation.Example:#include <stdio.h> int main() {int a = 5; // 0101 in binaryint result = ~a; // result is -6 (in binary: 1010, which is the two's complement of 6) printf("Bitwise NOT: %d\n", result); // Output: -6return 0;}Bitwise left shift (<<): Shifts the bits of the first operand to the left by the number of positions specified by the second operand. Zeros are shifted in from the right.Effect: Left shifting by one position is equivalent to multiplying the number by 2. Example:#include <stdio.h> int main() {int a = 5; // 0101 in binaryint result = a << 1; // result is 10 (binary: 1010) printf("Left Shift: %d\n", result); // Output: 10return 0;}Bitwise right shift (>>)Example:#include <stdio.h> int main() {int a = 5; // 0101 in binaryint result = a >> 1; // result is 2 (binary: 0010) printf("Right Shift: %d\n", result); // Output: 2 return 0;}Practical applications of bitwise operators in CSetting/checking flags: Bitwise operators are often used to work with flags, where each bit of an integer can represent an on/off state:#define FLAG1 0x01 // 00000001 #define FLAG2 0x02 // 00000010 int flags = 0;// Set FLAG1 flags |= FLAG1;// Check if FLAG2 is set if (flags & FLAG2) {printf("FLAG2 is set\n");} else {printf("FLAG2 is not set\n");}Bitmasking: You can use bitwise operators to create a mask and manipulate specific bits within a value.int mask = 0x0F; // 00001111 (mask for the last 4 bits) int value = 0x35; // 00110101int result = value & mask; // Extract last 4 bitsprintf("Masked result: %x\n", result); // Output: 5Unary operatorsUnary plus (+):Example:int a = +5; // a is 5Unary minus (-): Negates the value of the operand. If the operand is positive, it becomes negative, and vice versa. Example:int a = 5;int b = -a; // b is -5Increment operator (++):Prefix (++a): Increments the value before it is used in an expression. Postfix (a++): Increments the value after it is used in an expression. Example:int a = 5;int b = ++a; // a is 6, b is 6 (prefix) int c = a++; // a is 7, c is 6 (postfix)Decrement operator (--):.Example:int a = 5;int b = --a; // a is 4, b is 4 (prefix) int c = a--; // a is 3, c is 4 (postfix)Logical NOT (!): Inverts the truth value of a boolean expression. If the expression is true, it becomes false, and vice versa.Example:int a = 1; // trueint b = !a; // b is 0 (false)Bitwise NOT (~): Inverts each bit of the operand. Each 1 becomes 0, and each 0 becomes 1. Example:int a = 5; // 0101 in binaryint b = ~a; // b is -6 (in binary: 1010 in two's complement)Here is a simple C program demonstrating various unary operators:Increment and Decrement Operators:#include <stdio.h>int main() {    int a = 5;    int b = 10;    printf("a = %d\n", a++);    printf("After incrementing, a = %d\n", a);        printf("b = %d\n", --b);    printf("After decrementing, b = %d\n", b);    return 0;}Output:a = 5After incrementing, a = 6b = 9After decrementing, b = 9Example usage of assignment operators in C:#include <stdio.h> int main() {int a = 10; int b = 5;a += b; // a becomes 15 (10 + 5)printf("After += : a = %d\n", a); // Output: 15 a -= b; // a becomes 10 (15 - 5)printf("After -= : a = %d\n", a); // Output: 10 a *= b; // a becomes 50 (10 * 5)printf("After *= : a = %d\n", a); // Output: 50 a /= b; // a becomes 10 (50 / 5)printf("After /= : a = %d\n", a); // Output: 10 a %= 3; // a becomes 1 (10 % 3) printf("After %= : a = %d\n", a); // Output: 1return 0;}Example usage of conditional operators in C:#include <stdio.h> int main() {int a = 5; int b = 10;// Using the conditional operator int max = (a > b) ? a : b;printf("The maximum value is: %d\n", max); // Output: 10 return 0;}Format: A format string that specifies how to format the output. It can contain format specifiers (e.g., %d, %f, %s) that determine how subsequent arguments are displayed. Additional arguments will be formatted according to the format string.Example of printf():#include <stdio.h> int main() {int age = 25;float height = 5.9; char name[] = "Alice";// Using printf to format output printf("Name: %s\n", name); printf("Age: %d\n", age); printf("Height: %.1f feet\n", height); return 0;}Output:makefile Name: Alice Age: 25Height: 5.9 feetscanf()Used to read formatted input from the standard input (usually the keyboard). Syntax:int scanf(const char *format, ...);Parameters:Example of scanf():#include <stdio.h> int main() {int age; float height;char name[50];// Using scanf to read formatted input printf("Enter your name: ");scanf("%s", name); // Note: %s does not need & for arrays printf("Enter your age: ");scanf("%d", &age);  // Note: & is used to get the address of the variableprintf("Enter your height: "); scanf("%f", &height);printf("Hello, %s! You are %d years old and %.1f feet tall.\n", name, age, height); return 0;}Output:Enter your name: Alice Enter your age: 25 Enter your height: 5.9Hello, Alice! You are 25 years old and 5.9 feet tall.getc() and putc()The definitions are:Example of getc() and putc():#include <stdio.h> int main() {FILE *file; char ch;// Opening a file for writingfile = fopen("example.txt", "w");// Writing characters to the file for (ch = 'A'; ch <= 'Z'; ch++) {putc(ch, file);}fclose(file);// Opening the file for reading file = fopen("example.txt", "r");// Reading and displaying characters from the file printf("Contents of the file:\n");while ((ch = getc(file)) != EOF) { putchar(ch); // Output the character}fclose(file); return 0;}Output:Contents of the file:ABCDEFGHIJKLMNOPQRSTUVWXYZExample of fread() and fwrite():#include <stdio.h>truct Person {char name[50];int age;};int main() {struct Person p1 = {"Alice", 25};struct Person p2;// Writing the struct to a binary fileFILE *file = fopen("data.bin", "wb");fwrite(&p1, sizeof(struct Person), 1, file);fclose(file);// Reading the struct from the binary filefile = fopen("data.bin", "rb");fread(&p2, sizeof(struct Person), 1, file);fclose(file);// Displaying the read dataprintf("Name: %s, Age: %d\n", p2.name, p2.age); // Output: Name: Alice, Age: 25return 0;}