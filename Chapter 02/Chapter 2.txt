Declaring and using int:#include <stdio.h> int main() {int a = 10; // declaring an integer variable 'a' and assigning value 10int b = -5; // declaring another integer variable 'b' and assigning a negative value int sum = a + b; // performing additionprintf("Value of a: %d\n", a); printf("Value of b: %d\n", b); printf("Sum of a and b: %d\n", sum); return 0;}The output is as follows:Value of a: 10 Value of b: -5Sum of a and b: 5Example of unsigned int:#include <stdio.h> int main() {unsigned int x = 3000000000; // a large positive valueprintf("Value of x: %u\n", x); // %u is used for printing unsigned int return 0;}The output is as follows:Value of x: 3000000000Integer overflow example:#include <stdio.h> int main() {int max = 2147483647; // maximum value for 32-bit signed intmax = max + 1; // this causes an overflow printf("Overflowed value: %d\n", max);return 0;}The output (example of overflow) is as follows:Overflowed value: -2147483648The following example demonstrates how to declare, initialize, and use floating-point variables:#include <stdio.h>int main() {    // Declaration and initialization of floating-point variables    float num1 = 5.75;   // Single precision (float)    double num2 = 3.14159; // Double precision (double)    long double num3 = 2.718281828459045; // Extended precision (long double)    // Performing operations on floating-point variables    float sum = num1 + num2; // Adds num1 and num2    // Displaying the results    printf("Value of num1: %.2f\n", num1);  // Output with two decimal places    printf("Value of num2: %.5lf\n", num2); // Output with five decimal places    printf("Value of num3: %.10Lf\n", num3); // Output with ten decimal places for long double    printf("Sum of num1 and num2: %.2f\n", sum);    return 0;}Precision of floatFor example:#include <stdio.h> int main() {float num = 1234567.89; // A large floating-point numberprintf("Value of num: %f\n", num); // Only six digits of precision may be accuratereturn 0;}The output is as follows:Value of num: 1234568.000000Scientific notationThe example is as follows:#include <stdio.h> int main() {float large_number = 3.5e6; // 3.5 * 10^6 or 3500000float small_number = 2.75e-4; // 2.75 * 10^-4 or 0.000275 printf("Large number: %f\n", large_number); printf("Small number: %f\n", small_number);return 0;}The output is as follows:Large number: 3500000.000000Small number: 0.000275Common Operations on floatThe example is as follows:#include <stdio.h> int main() {float a = 1.0 / 3.0; // Division leading to a repeating decimal printf("1/3 in float: %f\n", a);return 0;}The output is as follows:1/3 in float: 0.333333Declaring and using doubleLike other data types in C, you can declare and initialize a double variable in a similar manner. Here is an example:#include <stdio.h>int main() {    // Declaration and initialization of a double variable    double radius = 7.5;  // Storing a floating-point number in a double variable    // Using the double variable in a calculation    double area = 3.14159 * radius * radius;  // Calculating the area of a circle    // Displaying the result    printf("The radius of the circle is: %.2lf\n", radius);    printf("The area of the circle is: %.2lf\n", area);    return 0;}Large-scale simulationsExample of precision with double:#include <stdio.h> int main() {double value = 1.0 / 7.0; // Performing division that leads to a repeating decimal printf("1/7 in double: %.15lf\n", value); // Print with 15 decimal placesreturn 0;}The output is as follows:1/7 in double: 0.142857142857143Scientific notationThe example is as follows:#include <stdio.h> int main() {double large_number = 1.23e10; // 1.23 * 10^10 double small_number = 4.56e-12; // 4.56 * 10^-12 printf("Large number: %e\n", large_number); printf("Small number: %e\n", small_number); return 0;}The output is as follows:Large number: 1.230000e+10Small number: 4.560000e-12Arithmetic operations with doubleThe example is as follows:#include <stdio.h> int main() {double a = 0.1;double b = 0.2; double sum = a + b;printf("Sum of 0.1 and 0.2 using double: %.15lf\n", sum); return 0;}The output is as follows:Sum of 0.1 and 0.2 using double: 0.300000000000000Double arithmetic overflow and underflowThe example is as follows:#include <stdio.h> int main() {double large_value = 1.7E+308 * 10; // Trying to exceed the maximum double value printf("Large value: %e\n", large_value); // Will print "inf" for infinityreturn 0;}The output is as follows:Large value: infIn this case, the double value exceeds its maximum limit and results in infinity (inf).Memory representationAn example is as follows:#include <stdio.h> int main() {char letter = 'A'; // Storing a single character 'A'char digit = '5';  // Storing a single digit as a character '5'printf("Character letter: %c\n", letter); // %c is used to print a char printf("Character digit: %c\n", digit);return 0;}The output is as follows:Character letter: ACharacter digit: 5Character arrays and stringsExample of a character array (string):#include <stdio.h> int main() {char name[] = "John"; // Storing a string "John" in a char array printf("Name: %s\n", name); // %s is used to print strings return 0;}The output is as follows:Name: JohnUnsigned charExample of unsigned char:#include <stdio.h> int main() {unsigned char u_char = 255; // Maximum value for unsigned charprintf("Unsigned char value: %u\n", u_char); // %u is used to print unsigned integers return 0;}The output is as follows:Unsigned char value: 255Character arithmeticExample of character arithmetic:#include <stdio.h> int main() {char letter = 'A'; // Storing character 'A'letter = letter + 1; // Incrementing the ASCII value of 'A' (65) to 'B' (66) printf("Next character after 'A': %c\n", letter);return 0;}The output is as follows:Next character after 'A': BArraysExample of an array:#include <stdio.h> int main() {int numbers[5] = {1, 2, 3, 4, 5}; // Declaring and initializing an arrayprintf("First element: %d\n", numbers[0]); // Accessing elements using index printf("Second element: %d\n", numbers[1]);// Looping through array elements for(int i = 0; i < 5; i++) {printf("Element at index %d: %d\n", i, numbers[i]);}return 0;}PointersExample of a pointer:#include <stdio.h> int main() {int num = 10;int *ptr = &num; // Declaring a pointer that stores the address of 'num'printf("Value of num: %d\n", num);printf("Address of num: %p\n", &num); // %p is used to print pointer addresses printf("Pointer ptr holds address: %p\n", ptr);printf("Value at address stored in ptr: %d\n", *ptr); // Dereferencing the pointer return 0;}FunctionsExample of a function:#include <stdio.h>// Function declaration and definition int add(int a, int b) {return a + b;}int main() {int result = add(5, 3); // Calling the function 'add' printf("Sum: %d\n", result);return 0;}StructuresExample of a structure:#include <stdio.h>// Defining a structure for a student struct Student {char name[50]; int age;float gpa;};int main() {struct Student student1 = {"Alice", 20, 3.75}; // Initializing a structure// Accessing structure members printf("Student Name: %s\n", student1.name); printf("Student Age: %d\n", student1.age); printf("Student GPA: %.2f\n", student1.gpa);return 0;}Enumeration types (enum)Syntax of enum:enum enum_name { constant1, constant2, constant3,...};Example of enum:#include <stdio.h>Defining an enumeration for days of the week: enum Day {Sunday,	// 0Monday,	// 1Tuesday,  // 2	Wednesday, // 3Thursday, // 4Friday,	// 5Saturday	// 6};int main() {enum Day today; // Declaring a variable of type Daytoday = Wednesday; // Assigning a value to the variableprintf("Value of today: %d\n", today); // Prints the integer value (3)Using enum in a switch statement:switch (today) {case Sunday:printf("It's Sunday!\n");break;case Monday:printf("It's Monday!\n");break;case Wednesday:printf("It's Wednesday!\n"); break;default:printf("It's some other day.\n"); break;}return 0;}Void data typeExample of a void function:#include <stdio.h>// Function that returns nothing (void) void greet() {printf("Hello, World!\n");}int main() {greet(); // Calling the void function return 0;}Example of a void pointer:#include <stdio.h>void printValue(void *ptr, char type) { if (type == 'i') {printf("Integer value: %d\n", *(int *)ptr); // Casting void pointer to int pointer} else if (type == 'f') {printf("Float value: %.2f\n", *(float *)ptr); // Casting void pointer to float pointer} else if (type == 'c') {printf("Character value: %c\n", *(char *)ptr); // Casting void pointer to char pointer}}int main() {int num = 42; float pi = 3.14; char letter = 'A';printValue(&num, 'i'); // Passing the address of num printValue(&pi, 'f'); // Passing the address of pi printValue(&letter, 'c'); // Passing the address of letter return 0;}VariablesSyntax:data_type variable_name;  // Declarationdata_type variable_name = value; // Declaration and InitializationExample:#include <stdio.h>int main() {    // Declaration and initialization of an enum variable    enum Days {Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday};    enum Days today = Wednesday;  // Initializing enum with the value 'Wednesday'    // Displaying the value of the enum variable    printf("The value of today is: %d\n", today);  // This will print '3', as Wednesday is the 3rd day in the enum    return 0;}Void Data Type#include <stdio.h>void printMessage() {    printf("This is a message from a void function.\n");}int main() {    // Calling a void function (it doesn't return any value)    printMessage();        return 0;}ConstantsAn example of using constants in C is as follows:#include <stdio.h>#define PI 3.14159	// Defining a constant using #define const int MAX_AGE = 100; // Declaring a constant variable int main() {int age = 25; // A variable that can change float circumference;// Using the constant PI in a calculationcircumference = 2 * PI * 5; // Calculate the circumference of a circle with radius 5 printf("Circumference of the circle: %.2f\n", circumference);// Trying to change the constant (this will cause a compile-time error)// MAX_AGE = 120; // Uncommenting this line will result in an errorprintf("Age: %d, Max Age: %d\n", age, MAX_AGE);return 0;}Conditional statementsif statement: Executes a block of code if a specified condition is true.if (condition) {// Code to execute if the condition is true}else statement: Follows an if statement and executes a block of code if the if condition is false.if (condition) {// Code if condition is true} else {// Code if condition is false}else if statement: Allows multiple conditions to be checked sequentially.if (condition1) {// Code if condition1 is true} else if (condition2) {// Code if condition2 is true} else {// Code if neither condition is true}switch statement: A more readable alternative to multiple if statements, particularly for checking a single variable against different values.switch (expression) { case value1:// Code to execute if expression equals value1 break;case value2:// Code to execute if expression equals value2 break;default:// Code to execute if none of the above cases match}Example of conditional statements:#include <stdio.h>int main() {int score = 85;// Using if-else to determine grade if (score >= 90) {printf("Grade: A\n");} else if (score >= 80) { printf("Grade: B\n");} else if (score >= 70) { printf("Grade: C\n");} else {printf("Grade: D\n");}return 0;}Looping statementsfor loop: Used when the number of iterations is known beforehand.for (initialization; condition; increment/decrement) {// Code to execute in each iteration}while loop: Continues to execute as long as the specified condition is true. The condition is checked before each iteration. while (condition) {// Code to execute while condition is true}do-while loop: Similar to the while loop, but the condition is checked after each iteration. This guarantees that the loop executes at least once.do {// Code to execute at least once} while (condition);Example of looping statements:#include <stdio.h>int main() {int i;// Using for loopprintf("For Loop:\n");for (i = 1; i <= 5; i++) {printf("%d\n", i); // Prints numbers 1 to 5}// Using while loopprintf("While Loop:\n");i = 1;while (i <= 5) {printf("%d\n", i);i++; // Increment i}// Using do-while loopprintf("Do-While Loop:\n");i = 1;do {printf("%d\n", i);i++; // Increment i} while (i <= 5);return 0;}Jump statementsbreak statement: Exits from a loop or switch statement prematurely.while (condition) {if (someCondition) { break; // Exit the loop}}continue statement: Skips the rest of the current iteration of a loop and proceeds to the next iteration.for (int i = 0; i < 10; i++) { if (i % 2 == 0) {continue; // Skip even numbers}printf("%d\n", i); // Print only odd numbers}goto statement: Unconditionally jumps to a labeled statement within the same function. Its use is generally discouraged due to potential readability and maintenance issues.label:// Codegoto label; // Jumps to labelExample of jump statements:#include <stdio.h> int main() {// Using breakfor (int i = 0; i < 10; i++) { if (i == 5) {break; // Exit the loop when i equals 5}printf("%d\n", i); // Prints 0 to 4}// Using continue printf("Continue Example:\n"); for (int i = 0; i < 10; i++) {if (i % 2 == 0) {continue; // Skip even numbers}printf("%d\n", i); // Prints only odd numbers}return 0;}Here is a simple example that demonstrates how to define and use a function in C:#include <stdio.h>// Function declarationint add(int a, int b); // Function prototypeint main() {int num1 = 5; int num2 = 10; int result;// Function callresult = add(num1, num2);printf("The sum of %d and %d is %d\n", num1, num2, result);return 0;}// Function definition int add(int a, int b) {return a + b; // Return the sum of a and b}Storage classes in CExample:#include <stdio.h> void function() {auto int num = 10; // 'auto' is optional printf("Number: %d\n", num);}int main() {function();// num is not accessible here return 0;}External storage class (extern):Example:#include <stdio.h>int globalVar = 20; // External variable void display() {printf("Global Variable: %d\n", globalVar);}int main() { display(); return 0;}Static storage class (static):Example:#include <stdio.h> void countCalls() {static int callCount = 0; // Static variable callCount++;printf("Function called %d times\n", callCount);}int main() {countCalls(); // Output: Function called 1 times countCalls(); // Output: Function called 2 times countCalls(); // Output: Function called 3 times return 0;}Register storage class (register):Example:#include <stdio.h> void calculateSum() {register int sum = 0; // Register variable for (register int i = 1; i <= 5; i++) {sum += i;}printf("Sum: %d\n", sum);}int main() { calculateSum(); return 0;}