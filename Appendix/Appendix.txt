1. Write a program to find area of a circle.#include <stdio.h>#include <math.h>int main() {    float radius, area;    printf("Enter the radius of the circle: ");    scanf("%f", &radius);    area = M_PI * radius * radius;    printf("The area of the circle is: %.2f\n", area);    return 0;     }2. Write a program to swap two numbers with and without using a third variable.#include <stdio.h>int main() {    int a, b, temp;    printf("Enter two numbers: ");    scanf("%d %d", &a, &b);    temp = a;    a = b;    b = temp;    printf("After swapping, a = %d, b = %d\n", a, b);    return 0;}Without a third variable:#include <stdio.h>int main() {    int a, b;    printf("Enter two numbers: ");    scanf("%d %d", &a, &b);    a = a + b;    b = a - b;    a = a - b;    printf("After swapping, a = %d, b = %d\n", a, b);    return 0;}3. Write a program to find the sum of individual digits of a positive integer.#include <stdio.h>int main() {    int num, sum = 0, digit;    printf("Enter a positive integer: ");    scanf("%d", &num);    while (num != 0) {        digit = num % 10;        sum += digit;        num /= 10;    }    printf("The sum of digits is: %d\n", sum);    return 0;}4. Write a program to generate all the prime numbers between 1 and n, where n is the input given by the user.#include <stdio.h>int main() {    int n, i, j, isPrime;    printf("Enter the upper limit: ");    scanf("%d", &n);    printf("Prime numbers between 1 and %d:\n", n);    for (i = 2; i <= n; i++) {        isPrime = 1;        for (j = 2; j * j <= i; j++) {            if (i % j == 0) {                isPrime = 0;                break;            }        }        if (isPrime) {            printf("%d ", i);        }    }    printf("\n");    return 0;}5. Write a function to generate PascalÕs triangle.#include <stdio.h>int main() {    int rows, i, j, coef = 1;    printf("Enter the number of rows: ");    scanf("%d", &rows);    for (i = 0; i < rows; i++) {        for (j = 0; j <= i; j++) {            if (j == 0 || j == i) {                coef = 1;            } else {                coef = coef * (i - j + 1) / j;            }            printf("%d ", coef);        }        printf("\n");    }    return 0;}6. Write a program to find the roots of a quadratic equation.#include <stdio.h>#include <math.h>int main() {    float a, b, c, discriminant, root1, root2;    printf("Enter coefficients a, b, and c: ");    scanf("%f %f %f", &a, &b, &c);    discriminant = b * b - 4 * a * c;    if (discriminant > 0) {        root1 = (-b + sqrt(discriminant)) / (2 * a);        root2 = (-b - sqrt(discriminant)) / (2 * a);        printf("Two real roots: %.2f and %.2f\n", root1, root2);    } else if (discriminant == 0) {        root1 = -b / (2 * a);        printf("One real root: %.2f\n", root1);    } else {        printf("No real roots\n");    }    return 0;}7. Program to calculate the sum of first n natural numbers.#include <stdio.h>int main() {    int n, sum = 0;    printf("Enter the value of n: ");    scanf("%d", &n);    sum = n * (n + 1) / 2;    printf("The sum of first %d natural numbers is: %d\n", n, sum);    return 0;}8. Write a program to print different pyramid patterns.#include <stdio.h>int main() {    int rows, i, j;    printf("Enter the number of rows: ");    scanf("%d", &rows);    // Pattern 1: Right-aligned pyramid    for (i = 1; i <= rows; i++) {        for (j = 1; j <= rows - i; j++) {            printf(" ");        }        for (j = 1; j <= 2 * i - 1; j++) {            printf("*");        }        printf("\n");    }    // Pattern 2: Left-aligned pyramid    for (i = 1; i <= rows; i++) {        for (j = 1; j <= i; j++) {            printf("*");        }        printf("\n");    }    // Pattern 3: Inverted pyramid    for (i = rows; i >= 1; i--) {        for (j = 1; j <= rows - i; j++) {            printf(" ");        }        for (j = 1; j <= 2 * i - 1; j++) {            printf("*");        }        printf("\n");    }    return 0;}9. Write programs to find the factorial of a given integer by using both recursive and non-recursive functions.Recursive Ð#include <stdio.h>int factorial(int n) {    if (n == 0) {        return 1;    } else {        return n * factorial(n - 1);    }}int main() {    int num, result;    printf("Enter a non-negative integer: ");    scanf("%d", &num);    if (num < 0) {        printf("Factorial is not defined for negative numbers.\n");    } else {        result = factorial(num);        printf("The factorial of %d is %d\n", num, result);    }    return 0;}Non- Recursive#include <stdio.h>int factorial(int n) {    if (n == 0) {        return 1;    } else {        return n * factorial(n - 1);    }}int main() {    int num, result;    printf("Enter a non-negative integer: ");    scanf("%d", &num);    if (num < 0) {        printf("Factorial is not defined for negative numbers.\n");    } else {        result = factorial(num);        printf("The factorial of %d is %d\n", num, result);    }    return 0;}10. Write a program to implement user defined function.#include <stdio.h>int sum(int a, int b) {    return a + b;}int main() {    int x, y, result;    printf("Enter two numbers: ");    scanf("%d %d", &x, &y);    result = sum(x, y);    printf("The sum of %d and %d is %d\n", x, y, result);    return 0;}11. Write a program to generate the first n terms of the Fibonacci sequence.#include <stdio.h>int main() {    int n, i, t1 = 0, t2 = 1, nextTerm;    printf("Enter the number of terms: ");    scanf("%d", &n);    printf("Fibonacci Series: ");    for (i = 1; i <= n; ++i) {        printf("%d ", t1);        nextTerm = t1 + t2;        t1 = t2;        t2 = nextTerm;    }    return 0;}12. Write a program to calculate the following series without pow() function.#include <stdio.h>int main() {    int n, i, result = 0;    printf("Enter the value of n: ");    scanf("%d", &n);    for (i = 1; i <= n; i++) {        result += i * i;    }    printf("The sum of the series is: %d\n", result);    return 0;}13. Write a program for addition of two matrices.#include <stdio.h>int main() {    int rows, cols, i, j;    printf("Enter the number of rows and columns: ");    scanf("%d %d", &rows, &cols);    int matrix1[rows][cols], matrix2[rows][cols], sum[rows][cols];    // Input matrix1    printf("Enter elements of matrix 1:\n");    for (i = 0; i < rows; i++) {        for (j = 0; j < cols; j++) {            scanf("%d", &matrix1[i][j]);        }    }    // Input matrix2    printf("Enter elements of matrix 2:\n");    for (i = 0; i < rows; i++) {        for (j = 0; j < cols; j++) {            scanf("%d", &matrix2[i][j]);        }    }    // Add matrices    for (i = 0; i < rows; i++) {        for (j = 0; j < cols; j++) {            sum[i][j] = matrix1[i][j] + matrix2[i][j];        }    }    // Print the sum matrix    printf("The sum of the matrices is:\n");    for (i = 0; i < rows; i++) {        for (j = 0; j < cols; j++) {            printf("%d ", sum[i][j]);        }        printf("\n");    }    return 0;}14. Write a program for calculating transpose of a matrix.#include <stdio.h>int main() {    int rows, cols, i, j;    printf("Enter the number of rows and columns: ");    scanf("%d %d", &rows, &cols);    int matrix[rows][cols], transpose[cols][rows];    // Input matrix    printf("Enter elements of the matrix:\n");    for (i = 0; i < rows; i++) {        for (j = 0; j < cols; j++) {            scanf("%d", &matrix[i][j]);        }    }    // Calculate transpose    for (i = 0; i < rows; i++) {        for (j = 0; j < cols; j++) {            transpose[j][i] = matrix[i][j];        }    }    // Print the transpose matrix    printf("The transpose of the matrix is:\n");    for (i = 0; i < cols; i++) {        for (j = 0; j < rows; j++) {            printf("%d ", transpose[i][j]);        }        printf("\n");    }    return 0;}15. Write a program for matrix multiplication by checking compatibility.#include <stdio.h>int main() {    int rows1, cols1, rows2, cols2, i, j, k;    printf("Enter the number of rows and columns of matrix 1: ");    scanf("%d %d", &rows1, &cols1);    printf("Enter the number of rows and columns of matrix 2: ");    scanf("%d %d", &rows2, &cols2);    if (cols1 != rows2) {        printf("Matrix multiplication is not possible.\n");        return 0;    }    int matrix1[rows1][cols1], matrix2[rows2][cols2], product[rows1][cols2];    // Input matrix1    printf("Enter elements of matrix 1:\n");    for (i = 0; i < rows1; i++) {        for (j = 0; j < cols1; j++) {            scanf("%d", &matrix1[i][j]);        }    }    // Input matrix2    printf("Enter elements of matrix 2:\n");    for (i = 0; i < rows2; i++) {        for (j = 0; j < cols2; j++) {            scanf("%d", &matrix2[i][j]);        }    }    // Multiply matrices    for (i = 0; i < rows1; i++) {        for (j = 0; j < cols2; j++) {            product[i][j] = 0;            for (k = 0; k < cols1; k++) {                product[i][j] += matrix1[i][k] * matrix2[k][j];            }        }    }    // Print the product matrix    printf("The product of the matrices is:\n");    for (i = 0; i < rows1; i++) {        for (j = 0; j < cols2; j++) {            printf("%d ", product[i][j]);        }        printf("\n");    }    return 0;}16. Write a program to concatenate two strings.#include <stdio.h>#include <string.h>int main() {    char str1[100], str2[100], result[200];    int len1, len2;    printf("Enter the first string: ");    scanf("%s", str1);    printf("Enter the second string: ");    scanf("%s", str2);    len1 = strlen(str1);    len2 = strlen(str2);    strcpy(result, str1);    strcat(result, str2);    printf("Concatenated string: %s\n", result);17. Write a program to implement Structure for storing information of a student.#include <stdio.h>struct Student {    char name[50];    int roll_no;    float marks;};int main() {    struct Student student;    printf("Enter student information:\n");    printf("Name: ");    scanf("%s", student.name);    printf("Roll No: ");    scanf("%d", &student.roll_no);    printf("Marks: ");    scanf("%f", &student.marks);    printf("\nStudent Information:\n");    printf("Name: %s\n", student.name);    printf("Roll No: %d\n", student.roll_no);    printf("Marks: %.2f\n", student.marks);    return 0;}18. Write a program to implement Union.#include <stdio.h>union Data {    int i;    float f;    char c;};int main() {    union Data data;    data.i = 10;    printf("Integer: %d\n", data.i);    data.f = 3.14;    printf("Float: %.2f\n", data.f);    data.c = 'A';    printf("Character: %c\n", data.c);    return 0;}19. Write a program to print the element of array using pointers.#include <stdio.h>int main() {    int arr[] = {10, 20, 30, 40, 50};    int *ptr = arr;    int i;    printf("Array elements using pointers:\n");    for (i = 0; i < 5; i++) {        printf("%d ", *(ptr + i));    }    printf("\n");    return 0;}20. Write a program to print the elements of a structure using pointers.#include <stdio.h>struct Student {    char name[50];    int roll_no;    float marks;};int main() {    struct Student student = {"Alice", 123, 95.5};    struct Student *ptr = &student;    printf("Student Information using pointers:\n");    printf("Name: %s\n", ptr->name);    printf("Roll No: %d\n", ptr->roll_no);    printf("Marks: %.2f\n", ptr->marks);    return 0;}21. Write a program to explore malloc and calloc.#include <stdio.h>#include <stdlib.h>int main() {    int *ptr1, *ptr2;    int n;    printf("Enter the number of elements: ");    scanf("%d", &n);    // Using malloc    ptr1 = (int *)malloc(n * sizeof(int));    if (ptr1 == NULL) {        printf("Memory allocation failed.\n");        return 1;    }    // Using calloc    ptr2 = (int *)calloc(n, sizeof(int));    if (ptr2 == NULL) {        printf("Memory allocation failed.\n");        return 1;    }    // ... (code to use ptr1 and ptr2)    free(ptr1);    free(ptr2);    return 0;}22. Write a program to create a file.#include <stdio.h>int main() {    FILE *fp;    fp = fopen("newfile.txt", "w");    if (fp == NULL) {        printf("Error creating file.\n");        return 1;    }    fprintf(fp, "Hello, world!\n");    fclose(fp);    printf("File created successfully.\n");    return 0;}23. Write a program which copies one file to another.#include <stdio.h>int main() {    FILE *fp1, *fp2;    char ch;    fp1 = fopen("source.txt", "r");    if (fp1 == NULL) {        printf("Error opening source file.\n");        return 1;    }    fp2 = fopen("destination.txt", "w");    if (fp2 == NULL) {        printf("Error creating destination file.\n");        fclose(fp1);        return 1;    }    while ((ch = fgetc(fp1)) != EOF) {        fputc(ch, fp2);    }    fclose(fp1);    fclose(fp2);    printf("File copied successfully.\n");    return 0;}24. Write a program that counts the number of characters and number of lines in a text file.#include <stdio.h>int main() {    FILE *fp;    char ch;    int charCount = 0, lineCount = 0;    fp = fopen("file.txt", "r");    if (fp == NULL) {        printf("Error opening file.\n");        return 1;    }    while ((ch = fgetc(fp)) != EOF) {        charCount++;        if (ch == '\n') {            lineCount++;        }    }    fclose(fp);    printf("Number of characters: %d\n", charCount);    printf("Number of lines: %d\n", lineCount);    return 0;}25. Write a program that changes every 5th character of data file into uppercase.#include <stdio.h>#include <ctype.h>int main() {    FILE *fp;    char ch;    int count = 0;    fp = fopen("file.txt", "r+");    if (fp == NULL) {        printf("Error opening file.\n");        return 1;    }    while ((ch = fgetc(fp)) != EOF) {        if (count % 5 == 0) {            ch = toupper(ch);        }        fseek(fp, -1, SEEK_CUR);        fputc(ch, fp);        count++;    }    fclose(fp);    printf("Every 5th character changed to uppercase.\n");    return 0;}