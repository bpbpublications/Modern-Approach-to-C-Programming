FunctionsThe syntax is as follows:return_type function_name(parameter_type parameter_name) {// function bodyExample:int add(int a, int b) {return a + b; // Returns the sum of a and bFunction prototypeThe syntax is as follows:return_type function_name(parameter_type parameter_name);Example:int add(int a, int b); // Function prototype for addParameter passing techniquesPass by value:.Example:void modifyValue(int x) {x = x + 10; // Modifying x}int main() { int num = 5;modifyValue(num); // num remains 5printf("%d\n", num); // Output: 5 return 0;}Pass by reference: Example:void modifyValue(int *x) {*x = *x + 10; // Modifying the value at the address pointed by x}int main() { int num = 5;modifyValue(&num); // Passing the address of num printf("%d\n", num); // Output: 15return 0;}Recursion workingExample of recursion: Here is a simple example of a recursive function in C that calculates the factorial of a non-negative integer:#include <stdio.h>// Function prototype int factorial(int n); int main() {int number;printf("Enter a non-negative integer: "); scanf("%d", &number);if (number < 0) {printf("Factorial is not defined for negative integers.\n");} else {printf("Factorial of %d is %d\n", number, factorial(number));}return 0;}// Recursive function to calculate factorial int factorial(int n) {// Base case if (n == 0) {return 1; // 0! is defined as 1}// Recursive casereturn n * factorial(n - 1); // n! = n * (n-1)!}The categories of built-in functions are as follows:Example:#include <stdio.h> #include <math.h> int main() {double number = 9.0;printf("Square root of %.2f is %.2f\n", number, sqrt(number));return 0;}String functions: The <string.h> library includes functions for manipulating strings, such as:strlen(): Returns the length of a string.strcpy(): Copies one string to another.strcat(): Concatenates two strings.strcmp(): Compares two strings.Example:#include <stdio.h> #include <string.h> int main() {char str1[20] = "Hello, "; char str2[] = "World!"; strcat(str1, str2);printf("%s\n", str1); // Output: Hello, World! return 0;}Input/output functions: The <stdio.h> library provides functions for performing input and output operations:printf(): Outputs formatted data to the standard output (console).scanf(): Reads formatted input from the standard input (keyboard).fopen(), fclose(): Functions for handling files.Example:#include <stdio.h>int main() { int num;printf("Enter a number: "); scanf("%d", &num);printf("You entered: %d\n", num); return 0;}Memory management functions: Example:#include <stdio.h> #include <stdlib.h> int main() {int *arr; int n = 5;// Allocating memory for 5 integers arr = (int *)malloc(n * sizeof(int)); if (arr == NULL) {printf("Memory allocation failed\n"); return 1;}for (int i = 0; i < n; i++) {arr[i] = i * 2; // Assigning values}for (int i = 0; i < n; i++) {printf("%d ", arr[i]); // Output: 0 2 4 6 8}free(arr); // Deallocating memory return 0;}How arrays are passed to functionsExample:#include <stdio.h>// Function prototypevoid modifyArray(int arr[], int size);int main() {int numbers[] = {1, 2, 3, 4, 5};int size = sizeof(numbers) / sizeof(numbers[0]);printf("Original array: "); for (int i = 0; i < size; i++) {printf("%d ", numbers[i]);}printf("\n");modifyArray(numbers, size); // Pass array to functionprintf("Modified array: "); for (int i = 0; i < size; i++) {printf("%d ", numbers[i]);}printf("\n");return 0;}// Function to modify the elements of the array void modifyArray(int arr[], int size) {for (int i = 0; i < size; i++) {arr[i] *= 2; // Double each element}}Example:void printMatrix(int arr[][COLS], int rows);Approaches to return arraysExample:#include <stdio.h> #include <stdlib.h>int* createArray(int size) {// Dynamically allocate memory for the array int *arr = (int *)malloc(size * sizeof(int));if (arr == NULL) {printf("Memory allocation failed\n");return NULL; // Return NULL if allocation fails}// Initialize the array elements for (int i = 0; i < size; i++) {arr[i] = i * 2; // Example initialization}return arr; // Return pointer to the array}int main() {int size = 5;int *myArray = createArray(size);if (myArray != NULL) { printf("Returned array: "); for (int i = 0; i < size; i++) {printf("%d ", myArray[i]);}printf("\n");}free(myArray); // Free the dynamically allocated memory return 0;}Using static arrays: Example:#include <stdio.h> int* getStaticArray() {static int arr[5]; // Static arrayfor (int i = 0; i < 5; i++) {arr[i] = i * 3; // Example initialization}return arr; // Return pointer to the static array}int main() {int *array = getStaticArray(); printf("Returned static array: "); for (int i = 0; i < 5; i++) {printf("%d ", array[i]);}printf("\n"); return 0;}Using structs: Example:#include <stdio.h> #define SIZE 5 typedef struct {int arr[SIZE];} ArrayStruct;ArrayStruct getArrayStruct() { ArrayStruct myArrayStruct; for (int i = 0; i < SIZE; i++) {myArrayStruct.arr[i] = i * 4; // Example initialization}return myArrayStruct; // Return struct containing the array}int main() {ArrayStruct result = getArrayStruct(); printf("Returned array from struct: "); for (int i = 0; i < SIZE; i++) {printf("%d ", result.arr[i]);}printf("\n"); return 0;}